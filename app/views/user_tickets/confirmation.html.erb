<div class="container">
  <div class="row">
    <div class="col-lg-12 col-md-6 my-4 d-flex">
      <div class="banner h-100 w-100 border border-2 border-gray shadow" style="background-image: url('<%= cl_image_path(@event.photos.first.key) %>'); background-size: cover; background-position: center; background-repeat: no-repeat;">
        <div class="content-wrapper text-center text-white" style="background-color: rgba(256, 256, 256, 0.6);">
          <h1 style="text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);">HERE'S YOUR TICKET!</h1>
          <h2 class="card-title" style="text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);"><%= @event.title.upcase %></h2>
          <p class="card-text" style="text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); display: inline-block;"><%= @event.start_time.strftime('%a,  %d/%m/%y, %H:%M') %></p>
          <p class="card-text" style="text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); display: inline-block;"> - </p>
          <p class="card-text" style="text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); display: inline-block;"><%= @event.end_time.strftime('%a,  %d/%m/%y, %H:%M') %></p>
          <h5 class="card-text" style="text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);"><%= @event.address %></h5>
        </div>
      </div>
    </div>
    <div class="col-lg-4 col-md-6 my-4">
      <div class="card border border-2 border-gray shadow">
        <div class="image-wrapper" style="height: 600px; overflow: hidden;">
          <% if @user_ticket.qrcode.attached? %>
            <%= cl_image_tag(@user_ticket.qrcode.key, width: "100%", height: 600, alt: "QR code for user_ticket") %>
          <% end %>
        </div>
      </div>
    </div>
    <div class="col-lg-8 col-md-6 my-4">
      <div class="card h-100 border border-2 border-gray shadow">
        <div class="card-body">
          <div class="col-lg-6 col-md-4 my-3" style="width: 100%; height: 500px;"
            data-controller="map"
            data-map-markers-value="<%= @markers.to_json %>"
            data-map-api-key-value="<%= ENV['MAPBOX_API_KEY'] %>">
          </div>
        </div>
      </div>
    </div>
  <canvas class="confetti" id="canvas"></canvas>
  </div>
</div>
<div class="text-center">
  <%= link_to "Back to communities", root_path, class: "btn btn-dark" %>
</div>




<script>
    //-----------Var Inits--------------
    let canvas = document.getElementById("canvas");
    let ctx = canvas.getContext("2d");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    let cx = ctx.canvas.width / 2;
    let cy = ctx.canvas.height / 2;

    let confetti = [];
    const confettiCount = 300;
    const gravity = 0.5;
    const terminalVelocity = 5;
    const drag = 0.075;
    const colors = [
      { front: 'red', back: 'darkred' },
      { front: 'green', back: 'darkgreen' },
      { front: 'blue', back: 'darkblue' },
      { front: 'yellow', back: 'darkyellow' },
      { front: 'orange', back: 'darkorange' },
      { front: 'pink', back: 'darkpink' },
      { front: 'purple', back: 'darkpurple' },
      { front: 'turquoise', back: 'darkturquoise' }
    ];

    //-----------Functions--------------
    let resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      cx = ctx.canvas.width / 2;
      cy = ctx.canvas.height / 2;
    };

    let randomRange = (min, max) => Math.random() * (max - min) + min;

    let initConfetti = () => {
      for (let i = 0; i < confettiCount; i++) {
        confetti.push({
          color: colors[Math.floor(randomRange(0, colors.length))],
          dimensions: {
            x: randomRange(10, 20),
            y: randomRange(10, 30)
          },
          position: {
            x: randomRange(0, canvas.width),
            y: canvas.height - 1
          },
          rotation: randomRange(0, 2 * Math.PI),
          scale: {
            x: 1,
            y: 1
          },
          velocity: {
            x: randomRange(-25, 25),
            y: randomRange(0, -50)
          }
        });
      }
    };

    //---------Render-----------
    let animationStartTime = null;

    let render = (timestamp) => {
      if (!animationStartTime) {
        animationStartTime = timestamp;
      }

      let elapsedTime = timestamp - animationStartTime;

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      if (elapsedTime < 7000) {
        confetti.forEach((confetto, index) => {
          let width = confetto.dimensions.x * confetto.scale.x;
          let height = confetto.dimensions.y * confetto.scale.y;

          // Move canvas to position and rotate
          ctx.translate(confetto.position.x, confetto.position.y);
          ctx.rotate(confetto.rotation);

          // Apply forces to velocity
          confetto.velocity.x -= confetto.velocity.x * drag;
          confetto.velocity.y = Math.min(confetto.velocity.y + gravity, terminalVelocity);
          confetto.velocity.x += Math.random() > 0.5 ? Math.random() : -Math.random();

          // Set position
          confetto.position.x += confetto.velocity.x;
          confetto.position.y += confetto.velocity.y;

          // Delete confetti when out of frame
          if (confetto.position.y >= canvas.height) confetti.splice(index, 1);

          // Loop confetti x position
          if (confetto.position.x > canvas.width) confetto.position.x = 0;
          if (confetto.position.x < 0) confetto.position.x = canvas.width;

          // Spin confetti by scaling y
          confetto.scale.y = Math.cos(confetto.position.y * 0.1);
          ctx.fillStyle = confetto.scale.y > 0 ? confetto.color.front : confetto.color.back;

          // Draw confetti
          ctx.fillRect(-width / 2, -height / 2, width, height);

          // Reset transform matrix
          ctx.setTransform(1, 0, 0, 1, 0, 0);
        });

        // Fire off another round of confetti
        if (confetti.length <= 10) initConfetti();

        window.requestAnimationFrame(render);
      } else {
        // Animation ended, clear confetti
        confetti = [];
      }
    };

    //---------Execution--------
    initConfetti();
    window.requestAnimationFrame(render);

    //----------Resize----------
    window.addEventListener('resize', resizeCanvas);
</script>


<style>

    #canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100vw;
      height: 120vh;
      z-index: 10;
    }
</style>
